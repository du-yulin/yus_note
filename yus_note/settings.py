"""
Django settings for yus_note project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import sys
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR / "apps"))
sys.path.insert(0, str(BASE_DIR / "extra_apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p%3ai@5y_a2j568ck%e=4yzj%qc9qq7vd$6b@jwjoshbl9+-16"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "tinymce",
    "social_django",
    "haystack",
    "user",
    "note",
    "user_proxy",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # 跨域中间件
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "yus_note.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "yus_note.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": "127.0.0.1",
        "PORT": 3306,
        "NAME": "yus_note",
        "USER": "root",
        "PASSWORD": "root",
    }
}

# 缓存配置
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "default",
        # "LOCATION": "redis://127.0.0.1:6379/0",
        "TIMEOUT": 300,
    },
    "authcode": {  # 验证码缓存
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "authcode",
        # "LOCATION": "redis://127.0.0.1:6379/1",
        "TIMEOUT": 300,
    },
    "model_fields": {  # 模型字段缓存，如用户的粉丝数，笔记的浏览量
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "field",
        # "LOCATION": "redis://127.0.0.1:6379/1",
        "TIMEOUT": 600,
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = "zh-Hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "static/"

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 设置一周第一天是周几，默认0，周天
FIRST_DAY_OF_WEEK = 1

# 设置用户模型
AUTH_USER_MODEL = "user.User"

# 用户认证引擎
AUTHENTICATION_BACKENDS = (
    "social_core.backends.weixin.WeixinOAuth2",  # social_auth认证：微信
    "social_core.backends.github.GithubOAuth2",  # social_auth认证：github
    "user.backends.EmailAuthcodeBackend",  # 邮箱号验证码认证
    "user.backends.PhoneAuthcodeBackend",  # 手机号验证码认证
    "user.backends.EmailPasswordBackend",  # 邮箱号密码认证
    "user.backends.PhonePasswordBackend",  # 手机号密码认证
    "django.contrib.auth.backends.ModelBackend",  # 默认认证：用户名密码认证
)

# 邮箱smtp配置
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.qq.com"
EMAIL_HOST_USER = "295311205@qq.com"
EMAIL_HOST_PASSWORD = "owzutigrwoaubghg"
EMAIL_PORT = 25

# session储存配置
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_CACHE_ALIAS = 'default'

# region corsheaders配置========================================
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie
CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1:5173",  # 设置白名单
    "http://localhost:5173",
)

# endregion corsheaders配置========================================

# region logger配置========================================

BASE_LOG_DIR = BASE_DIR / "log"
if not Path.exists(BASE_LOG_DIR):
    Path.mkdir(BASE_LOG_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # 设置已存在的logger不失效
    "filters": {},
    "formatters": {
        "standard": {
            "format": "[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d:%(funcName)s]：%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {
            "format": "[%(asctime)s][%(levelname)s]：%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "default": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_LOG_DIR / "debug.log",
            "maxBytes": 1024 * 1024 * 50,  # 日志大小50M
            "backupCount": 5,
            "formatter": "standard",
            "encoding": "utf-8",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "default"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# endregion logger========================================

# region drf配置========================================
REST_FRAMEWORK = {
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"authcode": "10/minute"},
}
# endregion drf配置======================================

# region celery配置========================================
# Broker配置，使用Redis作为消息中间件
BROKER_URL = "redis://127.0.0.1:6379/0"

# BACKEND配置，这里使用redis
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379/0"

# 结果序列化方案
CELERY_RESULT_SERIALIZER = "json"

# 任务结果过期时间，秒
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24

# 时区配置
CELERY_TIMEZONE = TIME_ZONE

# 指定导入的任务模块，可以指定多个
# CELERY_IMPORTS = (
#    'other_dir.tasks',
# )

CELERYBEAT_SCHEDULE = {
    "synchronize_note_views_peer_day": {  # 定时同步note浏览量
        # 任务路径
        "task": "apps.note.tasks.synchronize_note_views",
        # 每天2点59分
        "schedule": crontab(hour="2", minute="59"),
    },
    "synchronize_note_views_seconds": {  # 每隔一段时间同步note浏览量
        # 任务路径
        "task": "apps.note.tasks.synchronize_note_views",
        # 每5分钟同步
        "schedule": 300,
    },
}

# endregion drf配置======================================

# region social_django配置======================================
# weixin 配置
SOCIAL_AUTH_WEIXIN_KEY = "wx8a7327df0bf8c674"
SOCIAL_AUTH_WEIXIN_SECRET = "80f83e3207ccd88343ef0f931f228154"

# github 配置
SOCIAL_AUTH_GITHUB_KEY = "0f5cb9be77ff7ea99077"
SOCIAL_AUTH_GITHUB_SECRET = "55ff520ed5260b5e436f45b6c7f57d4605d652e6"
# 登录成功回调
SOCIAL_AUTH_LOGIN_REDIRECT_URL = "http://localhost:5173/login-callback/"
# endregion social_django配置====================================

# region tinymce配置========================================
# tinymce富文本编辑器配置
# TINYMCE_DEFAULT_CONFIG = {}
# endregion tinymce配置结束======================================

# region haystack配置=====================================
INDEX_PATH = BASE_DIR / "whoosh_index"
if not Path.exists(INDEX_PATH):
    Path.mkdir(INDEX_PATH)

HAYSTACK_CONNECTIONS = {
    "default": {
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        "ENGINE": "yus_note.haystack.backends.whoosh_cn_backend.WhooshEngine",
        "PATH": INDEX_PATH,
    },
}

# 自动更新索引
HAYSTACK_SIGNAL_PROCESSOR = "haystack.signals.RealtimeSignalProcessor"
# endregion haystack配置=====================================

# region 自定义配置========================================
# 默认用户头像，注意需要/media前缀
DEFAULT_AVATOR = "/media/user/default_avators/male.png"

# 用户默认复习计划
DEFAULT_REVIEW_PLAN = "1,3,7,14,30"

# 用户历史记录保存时长：天
HISTORY_EXPIRES = 90

# 验证码默认缓存数据库(CACHES中)
DEFAULT_AUTHCODE_CACHE = "authcode"

# 邮箱验证码模板
AUTHCODE_EMAIL_SUBJECT_TEMPLATE = "昱的笔记"
AUTHCODE_EMAIL_CONTENT_TEMPLATE = (
    "<h1>您好：</h1></br>您的验证码为：<strong>{}</strong></br>请在5分钟内完成验证。"
)

# 腾讯云产品配置
TENCENT = {
    # 用于实例化一个认证对象，入参需要传入腾讯云账户密钥对secretId，secretKey。
    # SecretId、SecretKey 查询: https://console.cloud.tencent.com/cam/capi
    "SECRET_ID": "AKID43ul4UzlUM9oRDqW8gZJ1c8Wmv1xiFi2",
    "SECRET_KEY": "QH2hDXRL5gMuVxEQYaPEvU2YAjLsDTZW",
    "SMS": {  # 腾讯云短信所有用途的字典
        "authcode": {  # 用来发送验证码的配置
            "REGION": "ap-beijing",  # 地域信息，可以直接填写字符串ap-guangzhou，支持的地域列表参考 https://cloud.tencent.com/document/api/382/52071#.E5.9C.B0.E5.9F.9F.E5.88.97.E8.A1.A8
            "HTTP_PROFILE": {  # 非必要配置。实例化一个http选项，可指定proxy访问接口等配置
                #   'protocol': '',# 协议
                #   'endpoint': "sms.tencentcloudapi.com",  # 指定接入地域域名(默认就近接入)
                #   'reqMethod': "POST",  # post请求(默认为post请求)
                #   'reqTimeout': 30,  # 请求超时时间，单位为秒(默认60秒)
                #   'keepAlive': '', # 长连接
                #   'proxy': "http://用户名:密码@代理IP:代理端口",  # 代理接口，如
                #   'rootDomain': '',
                #   'certification': '',
            },
            "CLIENT_PROFILE": {  # 非必要配置。实例化一个客户端配置对象，可以指定超时时间等配置
                #   'signMethod': "TC3-HMAC-SHA256",  # 指定签名算法
                #   'language': "en-US",
                #   'disable_region_breaker': '',
                #   'region_breaker_profile': '',
                #   'httpProfile': 一个http实例，无需在本配置中配置
            },
            "REQUEST": {  # 所有SMSRquest的配置如下：
                "SmsSdkAppId": "",  # str: 短信 SdkAppId，在 [短信控制台](https://console.cloud.tencent.com/smsv2/app-manage)  添加应用后生成的实际 SdkAppId，示例如1400006666。
                "TemplateId": "",  # str: 模板 ID，必须填写已审核通过的模板 ID。模板 ID 可前往 [国内短信](https://console.cloud.tencent.com/smsv2/csms-template) 或 [国际/港澳台短信](https://console.cloud.tencent.com/smsv2/isms-template) 的正文模板管理查看，若向境外手机号发送短信，仅支持使用国际/港澳台短信模板。
                "SignName": "",  # str: 短信签名内容，使用 UTF-8 编码，必须填写已审核通过的签名，例如：腾讯云，签名信息可前往 [国内短信](https://console.cloud.tencent.com/smsv2/csms-sign) 或 [国际/港澳台短信](https://console.cloud.tencent.com/smsv2/isms-sign) 的签名管理查看。发送国内短信该参数必填，且需填写签名内容而非签名ID。</dx-alert>
                #   'ExtendCode': '', # str: 短信码号扩展号，默认未开通，如需开通请联系 [腾讯云短信小助手](https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81)。
                #   'SessionContext': '', # str: 用户的 session 内容，可以携带用户侧 ID 等上下文信息，server 会原样返回。注意长度需小于512字节。
                #   'SenderId': '', # str: 国内短信无需填写该项；国际/港澳台短信已申请独立 SenderId 需要填写该字段，默认使用公共 SenderId，无需填写该字段。
                # 注：月度使用量达到指定量级可申请独立 SenderId 使用，详情请联系 [腾讯云短信小助手](https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81)。
                # 官方参数https://cloud.tencent.com/document/product/382/55981
            },
        }
    },
}

# endregion 自定义配置结束======================================
