# Generated by Django 4.2.1 on 2024-04-09 17:54

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models
import user.models
import user.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('note', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': '该用户名已经存在！'}, help_text='必填。50个以内的字符、数字、或者特殊字符(@ . + - _)。', max_length=64, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='用户名')),
                ('nickname', models.CharField(blank=True, help_text='8个以内字符。', max_length=8, verbose_name='昵称')),
                ('phone', models.CharField(blank=True, error_messages={'unique': '该手机号已注册！'}, max_length=11, null=True, verbose_name='手机号')),
                ('email', models.EmailField(blank=True, error_messages={'unique': '该邮箱已注册！'}, max_length=254, null=True, verbose_name='邮箱')),
                ('avator', models.ImageField(blank=True, null=True, upload_to=user.models.user_avator_upload_path, validators=[user.validators.FileSizeValidator(max_size='2MB')], verbose_name='头像')),
                ('resume', tinymce.models.HTMLField(default='', help_text='个人简介', max_length=256, verbose_name='简介')),
                ('is_staff', models.BooleanField(default=False, help_text='是否可以登录后台管理系统。', verbose_name='是否为管理员')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('registration_date', models.DateField(auto_now_add=True, verbose_name='注册日期')),
                ('last_publish_datetime', models.DateTimeField(blank=True, help_text='最近发布笔记时间。', null=True, verbose_name='最近发布时间')),
                ('review_history', models.JSONField(blank=True, default=user.models.default_history, help_text="笔记复习记录: 键为日期字符串; 值为每天复习数量, 每天复习数量使用','隔开。", verbose_name='复习记录')),
                ('publish_history', models.JSONField(blank=True, default=user.models.default_history, help_text="笔记发布记录: 键为日期字符串; 值为每天复习数量, 每天复习数量使用','隔开。", verbose_name='发布记录')),
                ('review_plan', models.CharField(default='1,3,7,14,30', help_text="分别在多少天后复习笔记，使用','连接多个天数（如：'1,3,7,30'表示新的笔记分别在1、3、7天后进行复习）。", max_length=64, verbose_name='复习计划')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserCollections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_date', models.DateField(blank=True, null=True, verbose_name='复习日期')),
                ('review_stage', models.PositiveSmallIntegerField(default=0, verbose_name='复习阶段')),
                ('last_review_date', models.DateField(blank=True, null=True, verbose_name='最近复习日期')),
                ('last_review_feedback', models.PositiveSmallIntegerField(blank=True, choices=[(0, '基本忘了'), (1, '有些忘了'), (2, '基本记得'), (1, '非常清楚')], null=True, verbose_name='最近复习反馈')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '用户收藏',
                'verbose_name_plural': '用户收藏',
                'db_table': 'user_user_collections',
            },
        ),
        migrations.CreateModel(
            name='UserRelations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='rel_following', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('following', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='rel_followers', to=settings.AUTH_USER_MODEL, verbose_name='被关注用户')),
            ],
            options={
                'verbose_name': '用户关系',
                'verbose_name_plural': '用户关系',
                'db_table': 'user_user_relations',
            },
        ),
        migrations.CreateModel(
            name='UserFolders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='名称')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='user.userfolders', verbose_name='父级文件夹')),
                ('user', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户文件夹',
                'verbose_name_plural': '用户文件夹',
                'db_table': 'user_user_folders',
            },
        ),
        migrations.CreateModel(
            name='UserFavorites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='名称')),
                ('notes', models.ManyToManyField(blank=True, related_name='favorites', through='user.UserCollections', to='note.note', verbose_name='收藏笔记')),
                ('user', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户收藏夹',
                'verbose_name_plural': '用户收藏夹',
                'db_table': 'user_user_favarites',
            },
        ),
        migrations.AddField(
            model_name='usercollections',
            name='favorite',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collections', to='user.userfavorites', verbose_name='收藏夹'),
        ),
        migrations.AddField(
            model_name='usercollections',
            name='note',
            field=models.ForeignKey(limit_choices_to={'is_delete': False}, on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='note.note', verbose_name='笔记'),
        ),
        migrations.AddField(
            model_name='usercollections',
            name='user',
            field=models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='user',
            name='collected_notes',
            field=models.ManyToManyField(blank=True, related_name='collectors', through='user.UserCollections', to='note.note', verbose_name='收藏的笔记'),
        ),
        migrations.AddField(
            model_name='user',
            name='following',
            field=models.ManyToManyField(blank=True, related_name='followers', through='user.UserRelations', to=settings.AUTH_USER_MODEL, verbose_name='关注'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='userrelations',
            constraint=models.UniqueConstraint(fields=('following', 'follower'), name='user_relations_uni_sub_follow'),
        ),
        migrations.AddConstraint(
            model_name='userfolders',
            constraint=models.UniqueConstraint(fields=('name', 'parent'), name='user_folders_uni_name_parent'),
        ),
        migrations.AddConstraint(
            model_name='userfavorites',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='user_favarites_uni_user_name'),
        ),
        migrations.AddConstraint(
            model_name='usercollections',
            constraint=models.UniqueConstraint(fields=('user', 'note'), name='user_collections_uni_user_note'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username',), name='user_uni_username'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('phone',), name='user_uni_phone'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('email',), name='user_uni_email'),
        ),
    ]
